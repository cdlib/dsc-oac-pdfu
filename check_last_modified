#!/bin/env python
from lxml.html import parse
import requests
import os
import boto.utils
import boto
import datetime
from time import sleep
from fabric.api import env, run, sudo
import fabric

from pprint import pprint as pp

def check_url(url, last_modified_domain, files_to_generate):
    dir, ext = os.path.splitext(url)
    if ext == '.xml':
        check_xml(url, last_modified_domain, files_to_generate)
    elif not ext:
        check_dir(url, last_modified_domain, files_to_generate)

def check_dir(url, last_modified_domain, files_to_generate):
    doc = parse(url).getroot()
    doc.make_links_absolute()
    links = doc.xpath("//a[@href]/@href")
    for link in links:
        if not link == url and link.startswith(url):
            check_url(link, last_modified_domain, files_to_generate)

def check_xml(url, last_modified_domain, files_to_generate):
    r = requests.head(url)
    last_modified_on_oac_header = r.headers['last-modified']
    last_modified_on_oac = boto.utils.parse_ts(last_modified_on_oac_header)
    # if the URL is not in the last_modified_domain OR last-modified is later than the database; add
    # the file to the list of files to be processed
    last_modified_item = last_modified_domain.get_item(url)
    if last_modified_item:
        pp(last_modified_item)
    if not last_modified_item:
        if last_modified_on_oac > datetime.datetime(2013,07,01):
            add_to_list(url, last_modified_domain, files_to_generate)
    elif last_modified_on_oac > boto.utils.parse_ts(last_modified_item["last_modified"]):
        add_to_list(url, last_modified_domain, files_to_generate)
        
def add_to_list(url, last_modified_domain, files_to_generate):
    files_to_generate.append(url)
    # TODO: create/update the simplebd item with the new timestamp and batchID

def launch_ec2():
    connection = boto.connect_ec2()
    reservation = connection.request_spot_instances(
                                       "1.00",
                                       "ami-05355a6c", # check http://aws.amazon.com/amazon-linux-ami/ for current AMI
                                       key_name="majorTom-keypair",
                                       placement="us-east-1b",
                                       instance_profile_arn="arn:aws:iam::563907706919:instance-profile/s3-read-write",
                                       #instance_type="m3.2xlarge")   #   1.00/hr    8vCPU       26 ECPU     30 G RAM
                                       instance_type="t1.micro")
    spot_id = str(reservation[0].id)
    spot_reservation = connection.get_all_spot_instance_requests(spot_id)[0]
    while spot_reservation.instance_id == None:
        sleep(20)
        spot_reservation = connection.get_all_spot_instance_requests(spot_id)[0]
    instance = connection.get_all_instances(spot_reservation.instance_id)[0].instance[0]
    instance.add_tag("pdfu","pdfu")
    hostname = instance.public_dns_name
    return spot_reservation.instance_id, hostname

def terminate_ec2(instance):
    connection = boto.connect_ec2()
    return connection.get_all_instances(instance)[0].instances[0].terminate()

def remote_process_pdf(hostname, files_to_generate):
    SETUP_SUDO = [ 
        'yum -y update    # for security',
        'yum -y install git',
        'yum -y groupinstall "Development Tools"',
        'easy_install pip',
        'pip install virtualenv',
        'yum -y install python-devel  # needed to install(init?) virtualenv with local python',
        'yum -y install ncurses-devel # needed to install pkgsrc python',
        'yum -y install openssl-devel',
        'yum -y install libjpeg-devel',
        'yum -y install freetype-devel',
        'yum -y install libtiff-devel',
        'yum -y install lcms-devel',
        'yum -y install mercurial',
    ]
    SETUP_RUN = [
        'curl -L https://raw.github.com/ucldc/appstrap/master/cdl/ucldc-operator-keys.txt >> ~/.ssh/authorized_keys',
        'git clone https://github.com/tingletech/pdfu.git',
        './pdfu/init.sh',
    ]
    env.host_string = hostname
    try:
        for command in SETUP_SUDO:
            sudo(command)
        for command in SETUP_RUN:
            run(command)
        for url in files_to_generate:
            command = "./pdfu/pdfu %s %s" % url, vorotos3url(url)
            run(command)
    finally:
        fabric.network.disconnect_all()

def vorotos3url(url):
    dir, ext = os.path.splitext(url)
    fixup = url.replace('http://voro.cdlib.org/oac-ead/prime2002/','s3://pdf-generation/pdfs/')
    return u"%s.pdf" % ( os.path.splitext(fixup)[0] )

sdb = boto.connect_sdb()
last_modified_domain = sdb.get_domain('ead_last_modified')
files_to_generate = []
check_url("http://voro.cdlib.org/oac-ead/prime2002/", last_modified_domain, files_to_generate)
# files to generate will be filled up; can now launch an EC2 and run the batch
if files_to_generate:
    pp(files_to_generate)
    #instance, hostname = launch_ec2()
    #remote_process_pdf(hostname, files_to_generate)
    #terminate_ec2(instance)
